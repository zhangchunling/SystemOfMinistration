package com.zrgk.project.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.zrgk.project.dao.BasicerDaoInter;
import com.zrgk.project.model.Basicer;
import com.zrgk.utils.JdbcUtil;

/**
 * 
 * @function: dao层，增删改查实现类
 * @author: 张春玲
 * @time: 2015-6-4
 * 
 */
public class BasicerDaoImpl extends JdbcUtil implements BasicerDaoInter {

	/**插入方法*/
	public boolean insertBasicer(Basicer basicer) {
		boolean flag = true;
		String sql = "insert into basic_info(projectName,customerName,personInCharge,manager," +
					 "persons,startTime,updateTime,completeTime,state,level,cost,comment,relstartTime," +
					 "updatePeople,addPeople,addTime) value(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		//按表顺序组装绑定问号的值
		List<Object> olist = new ArrayList<Object>();
		olist.add(basicer.getProjectName());
		olist.add(basicer.getCustomerName());
		olist.add(basicer.getPersonInCharge());
		olist.add(basicer.getManager());
		olist.add(basicer.getPersons());
		olist.add(basicer.getStartTime());		
		olist.add(basicer.getUpdateTime());
		olist.add(basicer.getCompleteTime());
		olist.add(basicer.getState());
		olist.add(basicer.getLevel());
		olist.add(basicer.getCost());
		olist.add(basicer.getComment());
		olist.add(basicer.getRelstartTime());
		olist.add(basicer.getUpdatePeople());
		olist.add(basicer.getAddPeople());
		olist.add(basicer.getAddTime());
		
		this.doPst(olist, sql); //执行插入
		this.closeAll();		//关闭资源
		return flag;			//返回插入是否成功
	}

	/**删除方法*/
	public void deleteBasicer(int pid) {
		String sql="delete from basic_info where pid="+pid;
		this.doPst(null, sql);
	}

	/**更新数据方法*/
	public boolean updateBasicer(Basicer ba) {
		String sql="update basic_info set projectName=?, customerName=?,personInCharge=?,manager=?,persons=?,startTime=?,relstartTime=?,cost=?,level=?,completeTime=?,comment=?,updatePeople=?,updateTime=? where pid=? ";
		//赋绑定问号的值 
		List<Object> list=new ArrayList<Object>();		
		list.add(ba.getProjectName());
		list.add(ba.getCustomerName());
		list.add(ba.getPersonInCharge());
		list.add(ba.getManager());
		list.add(ba.getPersons());
		list.add(ba.getStartTime());
		list.add(ba.getRelstartTime());
		list.add(ba.getCost());		
		list.add(ba.getLevel());
		list.add(ba.getCompleteTime());
		list.add(ba.getComment());
		list.add(ba.getUpdatePeople());
		list.add(ba.getUpdateTime());
		list.add(ba.getPid());
		
		//调用JDBC方法
		boolean flag=this.doPst(list, sql);
		return flag;
	}

	
	/**查询所有信息的方法*/
	public List<Basicer> queryAllBasicer(Basicer basicer) {		
		List<Basicer> list=new ArrayList<Basicer>();	//新建集合对象存放查回的所有数据
		List<Object>  olist=new ArrayList<Object>();	//存问号值
		StringBuffer sql=new StringBuffer("select * from basic_info where 1=1 ");//可变sql
		 //拼接sql语句
		 if(basicer!=null&&basicer.getProjectName()!=null&&!"".equals(basicer.getProjectName().trim())){
			 sql.append(" and projectName like ?");		 //拼接根据项目名来模糊查询的sql
			 olist.add("%"+basicer.getProjectName()+"%");//向参数集合放值 
		 }		 
		 if(basicer!=null&&basicer.getManager()!=null&&!"".equals(basicer.getManager().trim())){
			 sql.append(" and manager like ?"); 			//拼接根据经理名来模糊查询的sql
			 olist.add("%"+basicer.getManager()+"%");	//向参数集合放值 
		 }
		 
		 //拼接sql的排序
		 if(basicer!=null&&basicer.getOrder()==1){
			 sql.append(" order by relstartTime ");
		 }
		 if(basicer!=null&&basicer.getOrder()==2){
			 sql.append(" order by completeTime ");
		 }
		 
		 //拼接分页查询sql
		 if(basicer!=null){
			 int num=0;//从第几条数据开始，默认是0
			 num=(basicer.getCurrentPage()-1)*basicer.getPageSize();//页数在变化时，求从第几条开始取
			 sql.append(" limit "+num+","+basicer.getPageSize());	//拼接有取数据sql语句（如：limit 0,5）
		 }
		//将查回的所有数据放进结果集
		ResultSet rs=this.queryByPst(olist, sql.toString());
		
		//封装查回的数据
		if(rs!=null){
			try {
				while(rs.next()){
					Basicer bas=new Basicer();
					bas.setPid(rs.getInt("pid"));
					bas.setProjectName(rs.getString("projectName"));					
					bas.setCustomerName(rs.getString("customerName"));
					bas.setPersonInCharge(rs.getString("personInCharge"));
					bas.setManager(rs.getString("manager"));
					bas.setPersons(rs.getInt("persons"));
					bas.setStartTime(rs.getString("startTime"));
					bas.setUpdateTime(rs.getString("updateTime"));
					bas.setCompleteTime(rs.getString("completeTime"));					
					bas.setLevel(rs.getInt("level"));
					bas.setCost(rs.getDouble("cost"));
					bas.setComment(rs.getString("comment"));
					bas.setRelstartTime(rs.getString("relstartTime"));
					bas.setUpdatePeople(rs.getString("updatePeople"));
					bas.setAddPeople(rs.getString("addPeople"));
					bas.setAddTime(rs.getString("addTime"));
					//判断当前时间，用于赋状态
					int state=0;
					long date=new Date().getTime();//得到当前时间毫秒数					
					SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
					
					try {
						long dateStart=(sdf.parse(rs.getString("startTime"))).getTime();	//获取开始时间毫秒数
						long dateRelStart=sdf.parse(rs.getString("relstartTime")).getTime();//获取立项时间毫秒数
						long dateComplete=sdf.parse(rs.getString("completeTime")).getTime();//获取完成时间毫秒数
						if((date>=dateStart) && date<dateRelStart){
							state=1;
						}else if( date>=dateRelStart && date<dateComplete){
							state=2;
						}else if(date>=dateComplete){
							state=3;
						}
						
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}					
					bas.setState(state);
					
					list.add(bas);
					
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		this.closeAll();	//关闭资源
		return list;		//返回信息集合
	}

	/**根据Id查询的方法*/
	public Basicer queryBasicerById(int pid) {
		String sql="select * from basic_info where pid="+pid;
		Basicer bas=new Basicer();
		ResultSet rs=this.queryByPst(null, sql);
		
		if(rs!=null){
			try {
				//将查回的信息封装到javaBean里
				while(rs.next()){		
					bas.setPid(rs.getInt("pid"));
					bas.setProjectName(rs.getString("projectName"));		//项目名称
					bas.setCustomerName(rs.getString("customerName"));		//客户公司名称
					bas.setPersonInCharge(rs.getString("personInCharge"));	//客户方负责
					bas.setManager(rs.getString("manager"));				//项目经理
					bas.setPersons(rs.getInt("persons"));					//开发人数
					bas.setStartTime(rs.getString("startTime"));			//开始时间					
					bas.setCompleteTime(rs.getString("completeTime"));		//计划完成时间			
					bas.setLevel(rs.getInt("level"));						//级别
					bas.setCost(rs.getDouble("cost"));						//预估成本
					bas.setComment(rs.getString("comment"));				//备注
					bas.setRelstartTime(rs.getString("relstartTime"));		//立项时间
				
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return bas;
	}

		
	/**查询总的数据条数	*/
	public int totalSize(Basicer basicer) {
		int i=0;
		 List<Object> olist=new ArrayList<Object>();//组装参数的集合
		 //注：下面的sql语句是用于查有多少条数据，查询的结果就一行一列：总条数值
		StringBuffer sql=new StringBuffer("select count(pid) from basic_info where 1=1");//查询数据条数的sql语句,count计算出有多少条
		//根据项目名称查条数
		 if(basicer!=null&&basicer.getProjectName()!=null&&!"".equals(basicer.getProjectName().trim())){
			 sql.append(" and projectName like ?"); 
			 olist.add("%"+basicer.getProjectName()+"%");	//向参数集合放值 
		 }
		 //根据经理名字查条数
		 if(basicer!=null&&basicer.getManager()!=null&&!"".equals(basicer.getManager().trim())){
			 sql.append(" and manager like ?"); 
			 olist.add("%"+basicer.getManager()+"%");		//向参数集合放值 
		 }	 
		 //调用查询数据库的方法，并将拼接后的sql传去
		 ResultSet rs=this.queryByPst(olist, sql.toString());//sql语句是用聚合函数count计算出有多少列，返回的是count计算出的值的列表（只一行一列）
		 try{
			 if(rs!=null){
				 while(rs.next()){
					 i=rs.getInt(1);//取出rs的第一列（也只有一列）的总条数值
				 }
			 }
		
		 }catch(Exception e){
			 e.printStackTrace();
		 }finally{
			 this.closeAll();
		 }
		 
		return i;//返回数据总条数
	}
}
